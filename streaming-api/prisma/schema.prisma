// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement()) @db.Int
  name            String            @db.VarChar(100)
  lastname        String            @db.VarChar(100)
  email           String            @unique @db.VarChar(255)
  password        String            @db.VarChar(100)
  document        String            @unique @db.VarChar(15)
  rol             Rol               @relation(fields: [rolId], references: [id])
  rolId           Int               @db.Int
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  User_X_Content  User_X_Content[]
  AuthorizorToken AuthorizorToken[]
}

model Content {
  id                 Int                  @id @default(autoincrement()) @db.Int
  name               String               @db.VarChar(255)
  author             String               @db.VarChar(255)
  duration           Int                  @db.Int
  year               Int                  @db.Int
  synopsis           String               @db.Text
  url                String               @db.VarChar(255)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  User_X_Content     User_X_Content[]
  Content_X_Category Content_X_Category[]
}

model Catogory {
  id                 Int                  @id @default(autoincrement()) @db.Int
  name               String               @unique @db.VarChar(100)
  Content_X_Category Content_X_Category[]
}

model User_X_Content {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @db.Int
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int     @db.Int

  @@id([userId, contentId])
}

model Content_X_Category {
  content    Content  @relation(fields: [contentId], references: [id])
  contentId  Int      @db.Int
  category   Catogory @relation(fields: [categoryId], references: [id])
  categoryId Int      @db.Int

  @@id([contentId, categoryId])
}

model Rol {
  id   Int    @id @default(autoincrement()) @db.Int
  name String @db.VarChar(100)
  User User[]
}

model AuthorizorToken {
  id        Int      @id @default(autoincrement()) @db.Int
  token     String   @db.VarChar(1000)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @db.Int
  createdAt DateTime @default(now()) @map("created_at")
}
